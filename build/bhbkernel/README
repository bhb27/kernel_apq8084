! BHB tips Check how_to_build_this to a simple how to build my kernel

AnyKernel2 - Flashable Zip Template for Kernel Releases with Ramdisk Modifications
by osm0sis @ xda-developers

"AnyKernel is a template for an update.zip that can apply any kernel to any ROM, regardless of ramdisk." - Koush

AnyKernel2 pushes the format even further by allowing kernel developers to modify the underlying ramdisk for kernel feature support easily using a number of included command methods along with properties and variables.

A working script based on DirtyV Kernel for Galaxy Nexus (tuna) is included for reference.

// Properties / Variables

kernel.string=KernelName by YourName @ xda-developers
do.devicecheck=1
do.initd=1
do.modules=1
do.cleanup=1
device.name1=maguro
device.name2=toro
device.name3=toroplus
block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;

do.devicecheck=1 specified requires at least device.name1 to be present. This should match ro.product.device or ro.build.product for your device. There is support for up to 5 device.name# properties.

do.initd=1 will create the init.d directory in /system/etc/init.d/ and apply 755 permissions.

do.modules=1 will push the contents of the module directory to /system/lib/modules/ and apply 644 permissions.

do.cleanup=0 will keep the zip from removing it's working directory in /tmp/anykernel - this can be useful if trying to debug in adb shell whether the patches worked correctly. 

// Command Methods

dump_boot
backup_file <file>
replace_string <file> <if search string> <original string> <replacement string>
replace_section <file> <begin search string> <end search string> <replacement string>
remove_section <file> <begin search string> <end search string>
insert_line <file> <if search string> <before|after> <line match string> <inserted line>
replace_line <file> <line replace string> <replacement line>
remove_line <file> <line match string>
prepend_file <file> <if search string> <patch file>
insert_file <file> <if search string> <before|after> <line match string> <patch file>
append_file <file> <if search string> <patch file>
replace_file <file> <permissions> <patch file>
patch_fstab <fstab file> <mount match name> <fs match type> <block|mount|fstype|options|flags> <original string> <replacement string>
write_boot

"if search string" is the string it looks for to decide whether it needs to add the tweak or not, so generally something to indicate the tweak already exists.

Similarly, "line match string" and "line replace string" are the search strings that locate where the modification needs to be made for those commands, "begin search string" and "end search string" are both required to select the first and last lines of the script block to be replaced for replace_section, and "mount match name" and "fs match type" are both required to narrow the patch_fstab command down to the correct entry.

"before|after" requires you simply specify "before" or "after" for the placement of the inserted line, in relation to "line match string".

"block|mount|fstype|options|flags" requires you specify which part (listed in order) of the fstab entry you want to check and alter.

You may also use ui_print "<text>" to write messages back to the recovery during the modification process, and contains "<string>" "<substring>" to simplify string testing logic you might want in your script.

Note: the "begin search string" and "end search string" arguments of replace_section and remove_section require any forward slashes (/) to be escaped.

## seinject

	Injecting a rule:
	seinject " -s shell -t system -c file -p read -P "

	Injecting multiple permissions:
	seinject " -s shell -t system -c file -p read,write,open -P "

	Add a type_attribute to a domain:
	seinject " -s su -a mlstrustedsubject -P sepolicy "

	Injecting a permissive domain:
	seinject " -Z shell -P "

	Change a permissive domain to non-permissive:
	seinject " -z shell -P "

	Test a SELinux type exists:
	seinject " -e -s shell -P "

	Test a SELinux class exists:
	seinject " -e -c service_manager -P "

	Add a transition:
	seinject " -s su_daemon -f device -c file -t su_device -P "

	Add a filename transition:
	seinject " -s su_daemon -f device -c file -g "socket" -t su_device -P "

// Instructions

1- Place zImage in the root (dtb should also go here for devices that require a custom one, both will fallback to the original if not included)
2- Place any required ramdisk files in /ramdisk
3- Place any required patch files (generally partial files which go with commands) in /patch
4- Modify the anykernel.sh to add your kernel's name, boot partition location, permissions for included ramdisk files, and use methods for any required ramdisk modifications
5- zip -r9 UPDATE-AnyKernel2.zip * -x README UPDATE-AnyKernel2.zip

If supporting a recovery that forces zip signature verification (like Cyanogen Recovery) then you will need to also sign your zip using the method I describe here:
http://forum.xda-developers.com/android/software-hacking/dev-complete-shell-script-flashable-zip-t2934449

Not required, but any tweaks you can't hardcode into the source should be added with a bootscript.sh like is done in the example provided.


Have fun!



Tweak.prop
==========

credits for Tweak.prop @kl3 http://forum.xda-developers.com/showthread.php?t=2664332 | https://notabug.org/kl3/tweakprop

To use set "do.buildprop=1" to anykernel.sh

About
-----

Tweak.prop is a small yet powerful script to make permanent changes to Android's
`/system/build.prop` more easily or even completely automated.

When upgrading your Android ROM ---which you might do quite frequently when using custom ROMs---,
`/system/build.prop` gets reset to the ROM image's version wiping all your custom changes.

In order to use it your custom settings again, the only way is to reboot, apply your changes and
reboot yet another time for your modified build.prop to take effect.

Tweak.prop gets rid of those annoying behaviour by looking for a file called `tweak.prop` anywhere on
your phone's storage (even external SD card if present) and applies every change you specified. All this
takes place in between updating your ROM and rebooting to *userspace*. This is possible by putting the
tweak.prop script into a flashable zip which can even be flashed automatically by most custom ROMs.

This means, after having set up your personal `tweak.prop` file and eventually putting the `tweakprop.zip`
in some directory on your phone's storage like OpenDelta/FlashAfterUpdate (OmniROM) for example, everytime
you update your ROM `/system/build.prop` will look completely unchanged ---besides date, ROM version, etc.---.
Future changes can easily be made to your `tweak.prop` file using any text editor, terminal emulator, adb or
whatever suits you best.


Usage
-----

See `example.txt` for how to specify certain modifications.

If you're using the git version, simply run `zipit` to create a flashable `tweakprop-${ver}.zip`.

Since user requested it, there is also an *a* version, which already contains a `tweak.prop` file and
therefore won't search your phone for it. Simpy modify `a/tmp/tweak.prop` and run `zipit a` afterwards to
create a flashable `tweakprop-${ver}a.zip`. Besides that, there is no difference between those zip files
and their behaviour.

# 	 ======================================
# 	| Dynamic automated build.prop editing |
# 	|              --by kl3--              |
# 	 ======================================
#
# Personal file located at /sdcard/0/tweak.prop
#
# For help, please create an issue on https://notabug.org/kl3/tweakprop
# or visit the official XDA-Thread http://forum.xda-developers.com/showthread.php?p=2664332
#
# If you want to backup your build.prop before editing, uncomment the following line
# or specify a custom path. Already existing backup files will be overridden.
#

BACKUP=y|Y|yes|Yes|YES		# creates /sdcard/build.prop.backup since tweak.prop resides there
#BACKUP=n|N|no|No|NO		# same as commented out, just there for completeness
#BACKUP=/foo/bar/foo.bar	# chose your own path

#
# simply add your entries below
#

# set exactly this entry even if it overrides the already existing value
ro.sf.lcd_density=240

# remove every entry containing the string "debug.egl"
!debug.egl

# append the string ",ppp0" to the value string of the variable "mobiledata.interfaces" if it exists
@mobiledata.interfaces|,ppp0

# Override the value of the variable "telephony.lteOnCdmaDevice" to "1" if and only if the entry already exists
$telephony.lteOnCdmaDevice|1
